//
//  RecordingState.swift
//  FloRight
//
//  Recording state management for UI updates
//

import Foundation

@MainActor
class RecordingState: ObservableObject {
    @Published var isRecording = false
    @Published var isProcessing = false
    @Published var lastError: String?
    @Published var lastResult: String?
    
    func startRecording() {
        isRecording = true
        isProcessing = false
        lastError = nil
        lastResult = nil
        print("ðŸ“± [STATE] Recording started")
    }
    
    func stopRecording() {
        isRecording = false
        isProcessing = true
        print("ðŸ“± [STATE] Recording stopped, processing...")
    }
    
    func complete(result: String = "Recording completed") {
        isRecording = false
        isProcessing = false
        lastResult = result
        lastError = nil
        print("ðŸ“± [STATE] Recording completed: \(result)")
    }
    
    func error(_ message: String) {
        isRecording = false
        isProcessing = false
        lastError = message
        lastResult = nil
        print("ðŸ“± [STATE] Recording error: \(message)")
    }
    
    var status: String {
        if isRecording { return "Recording..." }
        if isProcessing { return "Processing..." }
        if let error = lastError { return "Error: \(error)" }
        if let result = lastResult { return result }
        return "Ready"
    }
}
